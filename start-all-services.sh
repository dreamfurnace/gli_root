#!/bin/bash

# GLI Platform - All Services Startup Script
# Î™®Îì† ÏÑúÎπÑÏä§Î•º Í≥†Ï†ï Ìè¨Ìä∏Î°ú ÎèôÏãúÏóê Ïã§ÌñâÌï©ÎãàÎã§

echo "üöÄ Starting GLI Platform Services..."
echo "=========================================="

# ÏÉâÏÉÅ Ï†ïÏùò
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# ÌòÑÏû¨ ÎîîÎ†âÌÜ†Î¶¨ Ï†ÄÏû•
ROOT_DIR=$(pwd)

# Ìè¨Ìä∏ ÏÑ§Ï†ï
USER_FRONTEND_PORT=3000
ADMIN_FRONTEND_PORT=3001
API_SERVER_PORT=8000
DATABASE_PORT=5433

# ÌîÑÎ°úÏÑ∏Ïä§ ID Ï†ÄÏû•ÏùÑ ÏúÑÌïú Î∞∞Ïó¥
declare -a PIDS=()

# ÏãúÍ∑∏ÎÑê Ìï∏Îì§Îü¨ - Ctrl+C Í∞êÏßÄ Ïãú Î™®Îì† ÌîÑÎ°úÏÑ∏Ïä§ Ï¢ÖÎ£å
cleanup() {
    echo -e "\n${YELLOW}üõë Stopping all services...${NC}"
    
    # Database Ï§ëÏßÄ
    echo -e "${BLUE}üîπ Stopping Database...${NC}"
    cd "$ROOT_DIR/gli_database"
    docker-compose down
    
    # Î™®Îì† Î∞±Í∑∏ÎùºÏö¥Îìú ÌîÑÎ°úÏÑ∏Ïä§ Ï¢ÖÎ£å
    for pid in "${PIDS[@]}"; do
        if kill -0 "$pid" 2>/dev/null; then
            echo -e "${BLUE}üîπ Stopping process $pid...${NC}"
            kill -TERM "$pid" 2>/dev/null
        fi
    done
    
    # Ïû†Ïãú ÎåÄÍ∏∞ ÌõÑ Í∞ïÏ†ú Ï¢ÖÎ£å
    sleep 2
    for pid in "${PIDS[@]}"; do
        if kill -0 "$pid" 2>/dev/null; then
            echo -e "${RED}üîπ Force killing process $pid...${NC}"
            kill -KILL "$pid" 2>/dev/null
        fi
    done
    
    echo -e "${GREEN}‚úÖ All services stopped.${NC}"
    exit 0
}

# Ï¢ÖÎ£å ÏãúÍ∑∏ÎÑê Îì±Î°ù
trap cleanup SIGINT SIGTERM

# Ìè¨Ìä∏ Ï≤¥ÌÅ¨ Ìï®Ïàò
check_port() {
    local port=$1
    local service=$2
    if lsof -i :$port > /dev/null 2>&1; then
        echo -e "${RED}‚ùå Port $port is already in use (required for $service)${NC}"
        echo -e "${YELLOW}   Please stop the service using port $port and try again.${NC}"
        return 1
    fi
    return 0
}

# ÌïÑÏàò ÎîîÎ†âÌÜ†Î¶¨ Ï°¥Ïû¨ ÌôïÏù∏
check_directory() {
    if [ ! -d "$1" ]; then
        echo -e "${RED}‚ùå Directory not found: $1${NC}"
        return 1
    fi
    return 0
}

# Ìè¨Ìä∏ ÏÇ¨Ïö© Ïó¨Î∂Ä ÌôïÏù∏
echo -e "${BLUE}üîç Checking port availability...${NC}"
check_port $USER_FRONTEND_PORT "User Frontend" || exit 1
check_port $ADMIN_FRONTEND_PORT "Admin Frontend" || exit 1
check_port $API_SERVER_PORT "Django API Server" || exit 1

# ÌïÑÏàò ÎîîÎ†âÌÜ†Î¶¨ ÌôïÏù∏
echo -e "${BLUE}üîç Checking project directories...${NC}"
check_directory "$ROOT_DIR/gli_user-frontend" || exit 1
check_directory "$ROOT_DIR/gli_admin-frontend" || exit 1
check_directory "$ROOT_DIR/gli_api-server" || exit 1
check_directory "$ROOT_DIR/gli_database" || exit 1

echo -e "${GREEN}‚úÖ All checks passed!${NC}"
echo ""

# 1. Database ÏãúÏûë
echo -e "${BLUE}üîπ Starting Database (PostgreSQL + Redis)...${NC}"
cd "$ROOT_DIR/gli_database"
docker-compose up -d
if [ $? -eq 0 ]; then
    echo -e "${GREEN}‚úÖ Database started on port $DATABASE_PORT${NC}"
else
    echo -e "${RED}‚ùå Failed to start database${NC}"
    exit 1
fi

# Îç∞Ïù¥ÌÑ∞Î≤†Ïù¥Ïä§ Ï§ÄÎπÑ ÎåÄÍ∏∞
echo -e "${YELLOW}‚è≥ Waiting for database to be ready...${NC}"
sleep 5

# 2. Django API Server ÏãúÏûë
echo -e "${BLUE}üîπ Starting Django API Server...${NC}"
cd "$ROOT_DIR/gli_api-server"
/Users/ahndonghyun/.cargo/bin/uv run python manage.py runserver 0.0.0.0:$API_SERVER_PORT > ../logs/django.log 2>&1 &
DJANGO_PID=$!
PIDS+=($DJANGO_PID)
sleep 5

# Django ÏÑúÎ≤Ñ Ìó¨Ïä§ Ï≤¥ÌÅ¨
if kill -0 $DJANGO_PID 2>/dev/null; then
    echo -e "${GREEN}‚úÖ Django API Server started on port $API_SERVER_PORT (PID: $DJANGO_PID)${NC}"
else
    echo -e "${RED}‚ùå Failed to start Django API Server${NC}"
    echo -e "${RED}   Check logs/django.log for details${NC}"
    cleanup
    exit 1
fi

# 3. User Frontend ÏãúÏûë
echo -e "${BLUE}üîπ Starting User Frontend...${NC}"
cd "$ROOT_DIR/gli_user-frontend"
/Users/ahndonghyun/.nvm/versions/node/v20.19.1/bin/npm run dev > ../logs/user-frontend.log 2>&1 &
USER_FRONTEND_PID=$!
PIDS+=($USER_FRONTEND_PID)
sleep 5

if kill -0 $USER_FRONTEND_PID 2>/dev/null; then
    echo -e "${GREEN}‚úÖ User Frontend started on port $USER_FRONTEND_PORT (PID: $USER_FRONTEND_PID)${NC}"
else
    echo -e "${RED}‚ùå Failed to start User Frontend${NC}"
    echo -e "${RED}   Check logs/user-frontend.log for details${NC}"
    cleanup
    exit 1
fi

# 4. Admin Frontend ÏãúÏûë
echo -e "${BLUE}üîπ Starting Admin Frontend...${NC}"
cd "$ROOT_DIR/gli_admin-frontend"
/Users/ahndonghyun/.nvm/versions/node/v20.19.1/bin/npm run dev > ../logs/admin-frontend.log 2>&1 &
ADMIN_FRONTEND_PID=$!
PIDS+=($ADMIN_FRONTEND_PID)
sleep 5

if kill -0 $ADMIN_FRONTEND_PID 2>/dev/null; then
    echo -e "${GREEN}‚úÖ Admin Frontend started on port $ADMIN_FRONTEND_PORT (PID: $ADMIN_FRONTEND_PID)${NC}"
else
    echo -e "${RED}‚ùå Failed to start Admin Frontend${NC}"
    echo -e "${RED}   Check logs/admin-frontend.log for details${NC}"
    cleanup
    exit 1
fi

# ÏÑúÎπÑÏä§ ÏãúÏûë ÏôÑÎ£å
echo ""
echo -e "${GREEN}üéâ All GLI Platform services are now running!${NC}"
echo "=========================================="
echo -e "${BLUE}üì± User Frontend:     ${GREEN}http://localhost:$USER_FRONTEND_PORT${NC}"
echo -e "${BLUE}‚öôÔ∏è  Admin Frontend:    ${GREEN}http://localhost:$ADMIN_FRONTEND_PORT${NC}"
echo -e "${BLUE}üîó API Server:        ${GREEN}http://localhost:$API_SERVER_PORT${NC}"
echo -e "${BLUE}üóÑÔ∏è  Database:          ${GREEN}localhost:$DATABASE_PORT${NC}"
echo "=========================================="
echo -e "${YELLOW}üìù Logs are saved in: $ROOT_DIR/logs/${NC}"
echo -e "${YELLOW}üõë Press Ctrl+C to stop all services${NC}"
echo ""

# ÏÑúÎπÑÏä§ ÏÉÅÌÉú Î™®ÎãàÌÑ∞ÎßÅ Î£®ÌîÑ
while true; do
    sleep 10
    
    # Í∞Å ÏÑúÎπÑÏä§ ÏÉÅÌÉú ÌôïÏù∏
    for pid in "${PIDS[@]}"; do
        if ! kill -0 "$pid" 2>/dev/null; then
            echo -e "${RED}‚ùå Service with PID $pid has stopped unexpectedly${NC}"
            cleanup
            exit 1
        fi
    done
done